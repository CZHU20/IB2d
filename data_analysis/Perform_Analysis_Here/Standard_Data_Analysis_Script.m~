function Standard_Data_Analysis_Script()

% TEMPORAL INFO FROM input2d %
dt = 5e-5;      % Time-step
Tfinal = 0.1;   % Final time in simulation
pDump=50;       % Note: 'print_dump' should match from input2d

% DATA ANALYSIS INFO %
start=1;                             % 1ST interval # included in data analysis
finish=40;                           % LAST interval # included in data analysis 
dump_Times = (start:1:finish)*pDump; % Time vector when data was printed in analysis

% SET PATH TO DESIRED viz_IB2d DATA %
path = '/Users/nick_battista/Desktop/IB2d/matIB2d/Examples/Example_Porous_Rubberbands/Compare_Porous_NonPorous_Rubberbands/viz_IB2d';

% SET PATH TO DA_BLACKBOX and SAVE CUR %
addpath('../DA_Blackbox');

for i=start:1:finish
    
    % Points to desired data viz_IB2d data file
    if i<10
       numSim = ['000', num2str(i)];
    elseif i<100
       numSim = ['00', num2str(i)];
    elseif i<1000
       numSim = ['0', num2str(i) '.vtk'];
    else
       numSim = num2str(i);
    end
    
    % Imports immersed boundary positions %
    [xLag,yLag] = give_Lag_Positions(path,numSim);

    ls
    pwd
    
    % Imports (x,y) grid values and ALL Eulerian Data %
    [x,y,data] = import_Eulerian_Data(path,numSim);

end


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %
% % FUNCTION: imports all Eulerian Data at a single step
% %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [x,y,data] = import_Eulerian_Data(path,numSim)
% 
% % read in Vorticity %
% strChoice = 'Omega'; first = 1;
% [Omega,x,y] = read_Eulerian_Data_From_vtk(path,numSim,strChoice,first);
% 
% % read in Momentum %
% strChoice = 'P'; first = 0;
% [P,~,~] = read_Eulerian_Data_From_vtk(path,numSim,strChoice,first);
% 
% % read in Velocity Magnitude %
% strChoice = 'uMag'; first = 0;
% [uMag,~,~] = read_Eulerian_Data_From_vtk(path,numSim,strChoice,first);
% 
% % read in x-directed Velocity Magnitude %
% strChoice = 'uX'; first = 0;
% [uX,~,~] = read_Eulerian_Data_From_vtk(path,numSim,strChoice,first);
% 
% % read in y-directed Velocity Magnitude %
% strChoice = 'uY'; first = 0;
% [uY,~,~] = read_Eulerian_Data_From_vtk(path,numSim,strChoice,first);
% 
% % read in Velocity Field %
% strChoice = 'u'; 
% [U,V] = read_Eulerian_Velocity__Field_vtk(path,numSim);
% 
% data = 1;




% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %
% % FUNCTION: Reads in the velocity data field from .vtk format
% %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [U,V] = read_Eulerian_Velocity__Field_vtk(path,simNums)
% 
% cd(path);
% 
% filename = ['u.' num2str(simNums) '.vtk'];  % desired lagPts.xxxx.vtk file
% 
% fileID = fopen(filename);
% if ( fileID== -1 )
%     error('\nCANNOT OPEN THE FILE!');
% end
% 
% str = fgets(fileID); %-1 if eof
% if ~strcmp( str(3:5),'vtk');
%     error('\nNot in proper VTK format');
% end
% 
% % read in the header info %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
% % Store grid info
% N = sscanf(str,'%*s %f %*f %*s',1); 
% Nx = N(1);
% 
% % bypass lines in header %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
% 
% % get formatting for reading in data from .vtk in fscanf %
% strVec = '%f';
% for i=2:3*Nx
%     strVec = [strVec ' %f'];
% end
% 
% % read in the vertices %
% [e_Data,count] = fscanf(fileID,strVec,3*Nx*Nx);
% if count ~= 3*Nx*Nx
%    error('Problem reading in Eulerian Data.'); 
% end
% 
% % reshape the matrix into desired data type %
% e_Data = reshape(e_Data, 3, count/3); % Reshape (3*Nx*Nx,1) vector to (Nx*Nx,3) matrix
% e_Data = e_Data';                     % Store vertices in new matrix
% 
% U = e_Data(:,1);       % Store U data
% V = e_Data(:,2);       % Store V data
% 
% U = reshape(U,Nx,Nx)';  % Reshape (Nx*Nx,1) matrix to  (Nx,Nx)
% V = reshape(V,Nx,Nx)';  % Reshape (Nx*Nx,1) matrix to  (Nx,Nx)
%  
% fclose(fileID);         % Closes the data file.
% 
% cd ..;                  % Change directory back to ../viz_IB2d/ directory




% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %
% % FUNCTION: Reads in the desired Eulerian data from .vtk format
% %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [e_Data,x,y] = read_Eulerian_Data_From_vtk(path,simNums,strChoice,first)
% 
% cd(path);
% 
% filename = [strChoice '.' num2str(simNums) '.vtk'];  % desired lagPts.xxxx.vtk file
% 
% fileID = fopen(filename);
% if ( fileID== -1 )
%     error('\nCANNOT OPEN THE FILE!');
% end
% 
% str = fgets(fileID); %-1 if eof
% if ~strcmp( str(3:5),'vtk');
%     error('\nNot in proper VTK format');
% end
% 
% % read in the header info %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
%  % Store grid info
% N = sscanf(str,'%*s %f %f %*s',2); 
% Nx = N(1); Ny = N(2);
% 
% % bypass lines in header %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
% % Store grid resolution if necessary %
% if first == 1
%     dx = sscanf(str,'%*s %f %*f %*f',1);
%     x=0;
%     for i=2:Nx
%         x(i) = x(i-1)+dx;
%     end
%     y = x';
% else
%     x=1; y=1; % Store arbitrary values
% end
% 
% % bypass lines in header %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
% % get formatting for reading in data from .vtk in fscanf %
% strVec = '%f';
% for i=2:Nx
%     strVec = [strVec ' %f'];
% end
% 
% % read in the vertices %
% [e_Data,count] = fscanf(fileID,strVec,Nx*Nx);
% if count ~= Nx*Nx
%    error('\nProblem reading in Eulerian Data.'); 
% end
% 
% % reshape the matrix into desired data type %
% e_Data = reshape(e_Data, 64, count/64); % Reshape vector -> matrix (every 3 entries in vector make into matrix row)
% e_Data = e_Data';                       % Store vertices in new matrix
% 
% fclose(fileID);                         % Closes the data file.
% 
% cd ..;                                  % Change directory back to ../viz_IB2d/ directory
% 
% 
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %
% % FUNCTION: gives (x,y) positions of the immersed boundary at a single step
% %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [xLag,yLag] = give_Lag_Positions(path,numSim)
% 
% [xLag,yLag] = read_Lagrangian_Data_From_vtk(path,numSim);





% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %
% % FUNCTION: Reads in (x,y) positions of the immersed boundary from .vtk
% %           format
% %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [xLag,yLag] = read_Lagrangian_Data_From_vtk(path,simNums)
% 
% cd(path);
% 
% filename = ['lagsPts.' num2str(simNums) '.vtk'];  % desired lagPts.xxxx.vtk file
% 
% fileID = fopen(filename);
% if ( fileID== -1 )
%     error('\nCANNOT OPEN THE FILE!');
%     return
% end
% 
% str = fgets(fileID); %-1 if eof
% if ~strcmp( str(3:5),'vtk');
%     error('\nNot in proper VTK format');
% end
% 
% % read in the header info %
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% str = fgets(fileID);
% 
% % stores # of Lagrangian Pts. as stated in .vtk file
% numLagPts = sscanf(str,'%*s %f %*s',1); 
% 
% % read in the vertices %
% [mat,count] = fscanf(fileID,'%f %f %f',3*numLagPts);
% if count ~= 3*numLagPts
%    error('\nProblem reading in Lagrangian Pts.'); 
% end
% 
% mat = reshape(mat, 3, count/3); % Reshape vector -> matrix (every 3 entries in vector make into matrix row)
% vertices = mat';              % Store vertices in new matrix
% 
% fclose(fileID);               % Closes the data file.
% 
% xLag = vertices(:,1);         % x-Lagrangian Pts.
% yLag = vertices(:,2);         % y-Lagrangian Pts.
% 
% cd ..;                        % Change directory back to ../viz_IB2d/ directory
